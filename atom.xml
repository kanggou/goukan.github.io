<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi,GouKan</title>
  
  <subtitle>学习弯道超车的技巧！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://goukan.me/"/>
  <updated>2019-09-01T10:27:47.951Z</updated>
  <id>http://goukan.me/</id>
  
  <author>
    <name>Goukan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>校园网无法打开正常部分网站</title>
    <link href="http://goukan.me/%E6%A0%A1%E5%9B%AD%E7%BD%91%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E6%AD%A3%E5%B8%B8%E9%83%A8%E5%88%86%E7%BD%91%E7%AB%99/"/>
    <id>http://goukan.me/校园网无法打开正常部分网站/</id>
    <published>2019-09-01T09:11:27.000Z</published>
    <updated>2019-09-01T10:27:47.951Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>刚来到新校区，一开始想利用UPD53端口来偷渡上网的，奈何技术太差，校园网安全太强，只能妥协花了230大洋办理了校园网，一开始使用就发现部分网站打开速度过慢，但是没有在意，直到我打开某直播网站，发现无法访问ip服务器了</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="..\images\QQ图片20190901174440.png" alt></div><div class="image-caption"></div></figure><p>自觉告诉我是DNS问题，所以我一开DNS服务器地址202.96.128.86和202.96.128.166</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="..\images\QQ图片20190901175026.png" alt="校园网的dns"></div><div class="image-caption">校园网的dns</div></figure><p><strong>1.用Vpn开全局代理能连吗？开pac代理能打开吗？</strong></p><p>开全局代理能打开，开pac代理不能打开。</p><p><strong>2.分别通过Ip地址和域名访问</strong></p><p>ip地址访问成功，网址访问失败。（问题一定出在DNS）</p><p><strong>3.nslookup <a href="http://www.douyu.com" target="_blank" rel="noopener">www.douyu.com</a></strong></p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="..\images\QQ图片20190901180513.png" alt></div><div class="image-caption"></div></figure><p>超时。（现有DNS没有在干活）</p><p><strong>4.ping 8.8.8.8</strong></p><p>ping通。（DNS服务器连通性没有问题）</p><h3 id="猜想与总结"><a href="#猜想与总结" class="headerlink" title="猜想与总结"></a>猜想与总结</h3><p>校园网可能都存在问题。电脑可以访问互联网，同时8.8.8.8可以ping通，但仍然出现典型的DNS问题。我猜测校园网分配的DNS服务器地址有问题。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>手动添加DNS服务器地址，如8.8.8.8和114.114.114.114</p><p>打开网页成功。</p><p>为了排除“自动获取导致故障”的可能性，手动添加了202.96.128.86这个地址作为DNS服务器地址。</p><p>打开网页失败</p><p>说明<strong>校园网自动获取的DNS服务器地址有些问题</strong>换一个DNS服务器地址就可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;刚来到新校区，一开始想利用UPD53端口来偷渡上网的，奈何技术太差，校园网安全太强，只能妥协花了230大洋办理了校园网，一开始使用就发现部分
      
    
    </summary>
    
    
      <category term="吐槽" scheme="http://goukan.me/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP</title>
    <link href="http://goukan.me/Spring-AOP/"/>
    <id>http://goukan.me/Spring-AOP/</id>
    <published>2019-08-17T09:37:05.000Z</published>
    <updated>2019-08-17T17:09:31.814Z</updated>
    
    <content type="html"><![CDATA[<p>现在在学习Spring，然后认为AOP思想挺重要的就写一篇博客来巩固一下自己所学的知识，也是我第一篇博客的开头吧！</p><p><strong>AOP:面向切面编程</strong><br><strong>面向切面编程，他是一个使用JDK/Cglib反向代理机制实现的</strong><br><strong>AOP不是框架，而是一种编译思想</strong></p><p>首先先引入jar：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.8.7&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.1_3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>定义一个切面类：</p><h4 id="Component-纳入IOC容器管理"><a href="#Component-纳入IOC容器管理" class="headerlink" title="@Component    //纳入IOC容器管理"></a>@Component //纳入IOC容器管理</h4><h4 id="Aspect-申明一个切面类"><a href="#Aspect-申明一个切面类" class="headerlink" title="@Aspect    申明一个切面类"></a>@Aspect 申明一个切面类</h4><p>定义切点</p><p>第9行代码中：</p><p>//<strong>execution</strong> 代表切面表达式执行</p><p>//第一个 * 表示需要切入的方法的返回值类型为所有，也可以使用String，int等类型</p><p>//后面的 * 为通配符，可以代表任何的类，包名</p><p>//最后一个 * 表示任何方法都被切入（log*表示 login与logout都会被切入，admin就不会被切入）</p><p>//括号里面的 <strong>..</strong> 为任何变量参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例如目录为</span><br><span class="line">.</span><br><span class="line">├── com</span><br><span class="line">|   └── service</span><br><span class="line">|        └── impl</span><br><span class="line">|             ├── login</span><br><span class="line">|             └── logout</span><br><span class="line"></span><br><span class="line">@Pointcut(value=&quot;execution (* com.service.impl. * .log * (..))&quot;)</span><br><span class="line">public void pointCut() &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="Before-前置通知，在切入方法之前执行"><a href="#Before-前置通知，在切入方法之前执行" class="headerlink" title="@Before    //前置通知，在切入方法之前执行"></a>@Before //前置通知，在切入方法之前执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Before(&quot;pointCut()&quot;)</span><br><span class="line">public void doBefore()&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="After-最终通知，在方法最后一行代码执行完之后执行"><a href="#After-最终通知，在方法最后一行代码执行完之后执行" class="headerlink" title="@After    最终通知，在方法最后一行代码执行完之后执行"></a>@After 最终通知，在方法最后一行代码执行完之后执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@After(&quot;pointCut()&quot;)</span><br><span class="line">public void doAfter(joinpoint joinpoint)&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="AfterReturning-后置通知。在方法返回值之后执行，一般用于对结果进行额外操作"><a href="#AfterReturning-后置通知。在方法返回值之后执行，一般用于对结果进行额外操作" class="headerlink" title="@AfterReturning    //后置通知。在方法返回值之后执行，一般用于对结果进行额外操作"></a>@AfterReturning //后置通知。在方法返回值之后执行，一般用于对结果进行额外操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@AfterReturning(&quot;pointCut()&quot;)</span><br><span class="line">public void doAfterReturning()&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="AfterThrowing-例外通知，只有发生异常时才会运行"><a href="#AfterThrowing-例外通知，只有发生异常时才会运行" class="headerlink" title="@AfterThrowing    //例外通知，只有发生异常时才会运行"></a>@AfterThrowing //例外通知，只有发生异常时才会运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@AfterThrowing(&quot;pointCut&quot;)</span><br><span class="line">public void doAfterThrowing()&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="Around-环绕通知，在方法执行之前进入，通过控制proceed方法执行业务bean方法，然后再退出"><a href="#Around-环绕通知，在方法执行之前进入，通过控制proceed方法执行业务bean方法，然后再退出" class="headerlink" title="@Around 环绕通知，在方法执行之前进入，通过控制proceed方法执行业务bean方法，然后再退出"></a>@Around 环绕通知，在方法执行之前进入，通过控制proceed方法执行业务bean方法，然后再退出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Around(&quot;pointCut&quot;)</span><br><span class="line">public void doAround(ProceedingJoinPoint joinpoint)&#123;&#125;</span><br></pre></td></tr></table></figure><p>最后还做了个图</p><figure class="image-bubble"><div class="img-lightbox"><div class="overlay"></div><img src="/images/AOP例图.jpg" alt></div><div class="image-caption"></div></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在在学习Spring，然后认为AOP思想挺重要的就写一篇博客来巩固一下自己所学的知识，也是我第一篇博客的开头吧！&lt;/p&gt;&lt;p&gt;&lt;strong&gt;AOP:面向切面编程&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;面向切面编程，他是一个使用JDK/Cglib反向代理机制实现的&lt;/s
      
    
    </summary>
    
    
      <category term="Spring" scheme="http://goukan.me/tags/Spring/"/>
    
      <category term="学习" scheme="http://goukan.me/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
